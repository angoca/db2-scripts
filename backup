#! /usr/bin/env bash

# Este script toma un backup de la base de datos, lo comprueba y lo copia en la
# maquina remota

# Se supone que la configuracion de ambas maquinas es la misma (nombre de instance
# directorios, usuarios, nombre de base de datos, etc.)

# Directorio de backups. En ambas maquinas debe ser el mismo.
BACKUP_DIRECTORY=/home/db2inst1/backups

OLD_BACKUP_DIRECTORY=/mnt/db2/old-backups/

# Nombre o IP de la maquina remota.
REMOTE_SERVER=23.21.64.225

# Nombre de la base de datos
DATABASE=WFSCPD

# Cantidad de archivos de backups full a conservar (contienen .0. en el nombre)
BACKUP_QTY=8

# Nombre de la instancia.
INSTANCE=db2inst1

# Opcion de compresion
# COMPRESS=
COMPRESS=compress

# Pide los parametros
TEMP=`getopt -o hnfdi --long help,online,offline,delta,incremental \
             -n backup -- "$@"`

if [[ $? -ne 0 ]] ; then
  echo "Opcion invalida para el backup: -n | --online, -f | --offline, -i | --incremental, -d | --delta"
  exit 1
fi

# Note the quotes around $TEMP: they are essential!
eval set -- "$TEMP"

HELP=false
TYPE=0
while true; do
  case "$1" in
    -f | --offline ) TYPE=1 ; shift ;;
    -n | --online ) TYPE=2 ; shift ;;
    -i | --incremental ) TYPE=3 ; shift ;;
    -d | --delta ) TYPE=4 ; shift ;;
    -h | --help ) HELP=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# Carga el ambiente de DB2
if [ -f /home/db2inst1/sqllib/db2profile ]; then
    . /home/db2inst1/sqllib/db2profile
fi
#set -xv
cd $BACKUP_DIRECTORY

if [[ $TYPE -eq 1 || $TYPE -eq 2 || $TYPE -eq 3 || $TYPE -eq 4 ]] ; then
  if [[ $TYPE -eq 1 ]] ; then
    db2 connect to $DATABASE
    db2 quiesce db immediate
    db2 unquiesce db
    db2 terminate
    db2 deactivate db wfscpd
    db2 force applications all
    echo "Haciendo backup full offline db $DATABASE"
    BACKUP=`db2 backup db $DATABASE $COMPRESS WITHOUT PROMPTING`
    RET=$?
  elif [[ $TYPE -eq 2 ]] ; then
    echo "Haciendo backup full online db $DATABASE"
    BACKUP=`db2 backup db $DATABASE online $COMPRESS WITHOUT PROMPTING`
    RET=$?
  elif [[ $TYPE -eq 3 ]] ; then
    echo "Haciendo online incremental backup db $DATABASE"
    BACKUP=`db2 backup db $DATABASE online incremental $COMPRESS WITHOUT PROMPTING`
    RET=$?
  elif [[ $TYPE -eq 4 ]] ; then
    echo "Haciendo online incremental delta backup db $DATABASE"
    BACKUP=`db2 backup db $DATABASE online incremental delta $COMPRESS WITHOUT PROMPTING`
    RET=$?
  else
    echo "Incoherent status"
    exit -1
  fi

  if [[ $RET -eq 0 ]] ; then
    BACKUP=`echo $BACKUP | awk '{print $11}'`
    FILENAME=$(ls -1 $BACKUP_DIRECTORY/*$BACKUP*)

    echo "Chequando archivo de backup - $FILENAME"
    CHECK=`db2ckbkp $FILENAME`
    RET=`echo $CHECK | awk '/successful/ {print "Successful"}'`
  
    if [[ $RET == "Successful" ]] ; then
      if [[ $TYPE -le 2 ]] ; then
        echo "Copiando backup a maquina de contingencia - $REMOTE_SERVER"
        scp $FILENAME $REMOTE_SERVER:$BACKUP_DIRECTORY

        echo "Contando backups locales"
        QTY=$(ls -1 $BACKUP_DIRECTORY/$DATABASE.0.$INSTANCE* | wc -l)
        echo "Backup locales $QTY"
        if [[ $QTY -gt $BACKUP_QTY ]] ; then
          while [[ $QTY -gt $BACKUP_QTY ]] ; do
            OLD_BACKUP=`ls -1t $DATABASE.0.$INSTANCE* | tail -1`
            echo "Moviendo el backup mas viejo a /mnt - $OLD_BACKUP"
            mv $OLD_BACKUP $OLD_BACKUP_DIRECTORY
            QTY=$(ls -1 $BACKUP_DIRECTORY/$DATABASE.0.$INSTANCE* | wc -l)
          done
        fi

        echo "Contando backups remotos"
        REMOTE_QTY=$(ssh $REMOTE_SERVER ls -1t $BACKUP_DIRECTORY/$DATABASE.0.$INSTANCE\* | wc -l)
       echo "Backups remotos $REMOTE_QTY"
        if [[ $REMOTE_QTY -gt $BACKUP_QTY ]] ; then
          while [[ $REMOTE_QTY -gt $BACKUP_QTY ]] ; do
            OLD_REMOTE=$(ssh $REMOTE_SERVER ls -1t $BACKUP_DIRECTORY/\*$DATABASE\* | tail -1)
            echo "Borrando backup remote mas viejo - $OLD_REMOTE"
            ssh $REMOTE_SERVER rm $OLD_REMOTE
            REMOTE_QTY=$(ssh $REMOTE_SERVER ls -1t $BACKUP_DIRECTORY/$DATABASE.0.$INSTANCE\* | wc -l)
          done
        fi
      fi
    else
      echo "Borrando backup corrupto"
      rm $FILENAME
      exit 2
    fi
  else
    echo "El backup full fallo! Es necesario volver a lanzarlo."
    echo $BACKUP
    exit 1
  fi
else
  echo "Opcion no reconocida: $TYPE."
fi
